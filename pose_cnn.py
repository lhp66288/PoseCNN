"""
Implements the PoseCNN network architecture in PyTorch.
"""
import torch
import torch.nn as nn
from torch.nn.init import kaiming_normal_
import torchvision.models as models
from torchvision.ops import RoIPool

import numpy as np
import random
import statistics
import time
from typing import Dict, List, Callable, Optional

from rob599 import quaternion_to_matrix
from p3_helper import HoughVoting, _LABEL2MASK_THRESHOL, loss_cross_entropy, loss_Rotation, IOUselection


def hello_pose_cnn():
    """
    This is a sample function that we will try to import and run to ensure that
    our environment is correctly set up on Google Colab.
    """
    print("Hello from pose_cnn.py!")


class FeatureExtraction(nn.Module):
    """
    Feature Embedding Module for PoseCNN. Using pretrained VGG16 network as backbone.
    """    
    def __init__(self, pretrained_model):
        super(FeatureExtraction, self).__init__()
        embedding_layers = list(pretrained_model.features)[:30]
        ## Embedding Module from begining till the first output feature map
        self.embedding1 = nn.Sequential(*embedding_layers[:23])
        ## Embedding Module from the first output feature map till the second output feature map
        self.embedding2 = nn.Sequential(*embedding_layers[23:])

        for i in [0, 2, 5, 7, 10, 12, 14]:
            self.embedding1[i].weight.requires_grad = False
            self.embedding1[i].bias.requires_grad = False
    
    def forward(self, datadict):
        """
        feature1: [bs, 512, H/8, W/8]
        feature2: [bs, 512, H/16, W/16]
        """ 
        feature1 = self.embedding1(datadict['rgb'])
        feature2 = self.embedding2(feature1)
        return feature1, feature2

class SegmentationBranch(nn.Module):
    """
    Instance Segmentation Module for PoseCNN. 
    """    
    def __init__(self, num_classes = 10, hidden_layer_dim = 64):
        super(SegmentationBranch, self).__init__()

        ######################################################################
        # TODO: Initialize instance segmentation branch layers for PoseCNN.  #
        #                                                                    #
        # 1) Both feature1 and feature2 should be passed through a 1x1 conv  #
        # + ReLU layer (seperate layer for each feature).                    #
        #                                                                    #
        # 2) Next, intermediate features from feature1 should be upsampled   #
        # to match spatial resolution of features2.                          #
        #                                                                    #
        # 3) Intermediate features should be added, element-wise.            #
        #                                                                    #
        # 4) Final probability map generated by 1x1 conv+ReLU -> softmax     #
        #                                                                    #
        # It is recommended that you initialize each convolution kernel with #
        # the kaiming_normal initializer and each bias vector to zeros.      #
        #                                                                    #
        # Note: num_classes passed as input does not include the background  #
        # our desired probability map should be over classses and background #
        # Input channels will be 512, hidden_layer_dim gives channels for    #
        # each embedding layer in this network.                              #
        ######################################################################
        # Replace "pass" statement with your code

        #设置了实例分割任务的类别数，不包括背景类别
        self.num_classes = num_classes

        feat1 = []

        #定义了一个二维的卷积层，输入通道数为512，输入通道数（卷积核的数量）为hidden_layer_dim=64，卷积核的大小为1×1，步长为1
        #表示并不会改变特征图空间维度（长度和宽度），只会改变通道数
        conv1=nn.Conv2d(512, hidden_layer_dim, 1, stride=1)

        #用于对卷积层的权重进行初始化这种初始化方法被称为 Kaiming 初始化（也称为 He 初始化），
        #它是为了适应 ReLU（Rectified Linear Unit）激活函数的特性而设计的。
        nn.init.kaiming_normal_(conv1.weight)

        #偏置项初始化为0
        conv1.bias.data.fill_(0.0)

        #将卷积层和ReLU激活函数特征1列表中
        feat1.append(conv1)
        feat1.append(nn.ReLU())

        #创建一个 nn.Sequential 容器，用于存储 feat1 列表中的层，并按顺序执行它们。
        self.feat1 = nn.Sequential(*feat1)

        #feat2与feat1类似
        feat2 = []
        conv2=nn.Conv2d(512, hidden_layer_dim, 1, stride=1)
        nn.init.kaiming_normal_(conv2.weight)
        conv2.bias.data.fill_(0.0)
        feat2.append(conv2)
        feat2.append(nn.ReLU())
        self.feat2 = nn.Sequential(*feat2)

        #用于存储最终概率图的序列
        fin_prob = []

        #输入通道数为64，输出通道数为类别数加1（背景）
        conv3=nn.Conv2d(hidden_layer_dim, num_classes+1, 1, stride=1)
        nn.init.kaiming_normal_(conv3.weight)
        conv3.bias.data.fill_(0.0)
        fin_prob.append(conv3)
        fin_prob.append(nn.ReLU())
        self.fin_prob = nn.Sequential(*fin_prob)

        ######################################################################
        #                            END OF YOUR CODE                        #
        ######################################################################


    def forward(self, feature1, feature2):
        """
        Args:
            feature1: Features from feature extraction backbone (B, 512, h, w)
            feature2: Features from feature extraction backbone (B, 512, h//2, w//2)
        Returns:
            probability: Segmentation map of probability for each class at each pixel.
                probability size: (B,num_classes+1,H,W)
            segmentation: Segmentation map of class id's with highest prob at each pixel.
                segmentation size: (B,H,W)
            bbx: Bounding boxs detected from the segmentation. Can be extracted 
                from the predicted segmentation map using self.label2bbx(segmentation).
                bbx size: (N,6) with (batch_ids, x1, y1, x2, y2, cls)
        """
        probability = None
        segmentation = None
        bbx = None
        
        ######################################################################
        # TODO: Implement forward pass of instance segmentation branch.      #
        ######################################################################
        # Replace "pass" statement with your code

        #分别使用feat1和feat2处理feature1和feature2
        inter_feat1 = self.feat1(feature1)
        inter_feat2 = self.feat2(feature2)

        #特征图的上采样，原始特征图为inter_feat2，尺度因子scale_factor表示特征图的长度和宽度都扩大多少倍
        #inter_feat2特征图像素尺寸为原图的1/16
        #inter_feat1特征图像素尺寸为原图的1/8
        #inter_feat2先上采样扩大两倍与inter_feat1大小相同
        inter_feat2_up2 = nn.functional.interpolate(inter_feat2, scale_factor=2)
        
        #inter_feat1和inter_feat2_up2由于大小相同，所以可以相加
        inter_feat = inter_feat2_up2 + inter_feat1

        #self.fin_prob的输出通道数就是类别数加1（背景）
        probability = self.fin_prob(inter_feat)

        #对每个像素为不同类别的概率进行归一化，使得各个像素为某一种类别的概率为0-1，并且相加的和为1
        probability = nn.functional.softmax(probability, dim=1)

        #nn.functional.interpolate 函数用于将概率图上采样到指定的尺寸 (480, 640)。这通常是输入图像的原始尺寸。
        #mode="bilinear" 表示使用双线性插值方法进行上采样，适用于图像数据。
        #align_corners=True 表示在插值时对齐角点，这样可以更好地保持图像的几何形状。
        probability = nn.functional.interpolate(probability, size= (480,640), mode="bilinear", align_corners=True)

        #torch.argmax 函数用于找到每个像素的最大概率类别
        segmentation = torch.argmax(probability, dim=1)

        bbx = self.label2bbx(segmentation)
        ######################################################################
        #                            END OF YOUR CODE                        #
        ######################################################################

        return probability, segmentation, bbx
    
    def label2bbx(self, label):
        bbx = []
        bs, H, W = label.shape
        device = label.device

        #label.view用于调整张量的形状，这里是将label从[bs,H,W]转换为[bs,1,H,W],增加了一个维度
        #repeat(1, self.num_classes, 1, 1)的意思是bs，H，W的维度保持不变，第二个维度重复num_classes次
        #最终形成[bs,num_classes,H,W]形状的张量
        label_repeat = label.view(bs, 1, H, W).repeat(1, self.num_classes, 1, 1).to(device)

        #linspace生成0-9，10个整数组成的一维张量
        #view用于改变张量的形状
        #-1是一个特殊的值，告诉 PyTorch 自动计算这个维度的大小，使得新形状的的元素总数与原始张量的元素总数相匹配。
        #在这个例子中，原始张量有 self.num_classes 个元素，所以 -1 维度的大小将被设置为 self.num_classes。
        #分别重复bs，1，H，W次后最终形成[bs,num_classes,H,W]形状的张量
        label_target = torch.linspace(0, self.num_classes - 1, steps = self.num_classes).view(1, -1, 1, 1).repeat(bs, 1, H, W).to(device)

        #将label_repeat与label_target进行比较,可以将图片的特征图与各个类型进行比较，最终返回一个bool类型的张量，其中label_repeat与label_target相等
        #的地方为true，不同的地方为false，通过该操作，我们可以获得不同类别像素点的位置
        mask = (label_repeat == label_target)

        #遍历每一批次
        for batch_id in range(mask.shape[0]):
            #遍历每一类别
            for cls_id in range(mask.shape[1]):
                #不考虑背景（背景id一般设置为0）
                if cls_id != 0: 
                    # cls_id == 0 is the background
                    #查找各个类别中不为0的像素点，也就是该像素点和某个类别匹配
                    y, x = torch.where(mask[batch_id, cls_id] != 0)
                    #获得y中元素的个数，判断符合某个类别的像素点个数是否多于事先设定的值，这里为500
                    if y.numel() >= _LABEL2MASK_THRESHOL:
                        #batch_id：当前图像的批次索引。
                        #torch.min(x).item()：边界框左边界的x坐标。
                        #torch.min(y).item()：边界框上边界的y坐标。
                        #torch.max(x).item()：边界框右边界的x坐标。
                        #torch.max(y).item()：边界框下边界的y坐标。
                        #cls_id：类别索引。
                        bbx.append([batch_id, torch.min(x).item(), torch.min(y).item(), 
                                    torch.max(x).item(), torch.max(y).item(), cls_id])
        bbx = torch.tensor(bbx).to(device)
        return bbx
        
        
class TranslationBranch(nn.Module):
    """
    3D Translation Estimation Module for PoseCNN. 
    """    
    def __init__(self, num_classes = 10, hidden_layer_dim = 128):
        super(TranslationBranch, self).__init__()
        
        ######################################################################
        # TODO: Initialize layers of translation branch for PoseCNN.         #
        # It is recommended that you initialize each convolution kernel with #
        # the kaiming_normal initializer and each bias vector to zeros.      #
        ######################################################################
        # Replace "pass" statement with your code
        self.num_classes = num_classes

        feat1 = []
        conv1=nn.Conv2d(512, hidden_layer_dim, 1, stride=1)
        nn.init.kaiming_normal_(conv1.weight)
        conv1.bias.data.fill_(0.0)
        feat1.append(conv1)
        feat1.append(nn.ReLU())
        self.feat1 = nn.Sequential(*feat1)

        feat2 = []
        conv2=nn.Conv2d(512, hidden_layer_dim, 1, stride=1)
        nn.init.kaiming_normal_(conv2.weight)
        conv2.bias.data.fill_(0.0)
        feat2.append(conv2)
        feat2.append(nn.ReLU())
        self.feat2 = nn.Sequential(*feat2)

        fin_prob = []
        conv3=nn.Conv2d(hidden_layer_dim, 3*num_classes, 1, stride=1)
        nn.init.kaiming_normal_(conv3.weight)
        conv3.bias.data.fill_(0.0)
        fin_prob.append(conv3)
        # fin_prob.append(nn.ReLU())
        self.fin_prob = nn.Sequential(*fin_prob)
        ######################################################################
        #                            END OF YOUR CODE                        #
        ######################################################################

    def forward(self, feature1, feature2):
        """
        Args:
            feature1: Features from feature extraction backbone (B, 512, h, w)
            feature2: Features from feature extraction backbone (B, 512, h//2, w//2)
        Returns:
            translation: Map of object centroid predictions.
                translation size: (N,3*num_classes,H,W)
        """
        translation = None
        ######################################################################
        # TODO: Implement forward pass of translation branch.                #
        ######################################################################
        # Replace "pass" statement with your code
        inter_feat1 = self.feat1(feature1)
        inter_feat2 = self.feat2(feature2)
        inter_feat2_up2 = nn.functional.interpolate(inter_feat2, scale_factor=2, mode="nearest")
        inter_feat = inter_feat1 + inter_feat2_up2

        translation_1 = self.fin_prob(inter_feat)
        translation = nn.functional.interpolate(translation_1, size= (480,640), mode="bilinear", align_corners=True)
        ######################################################################
        #                            END OF YOUR CODE                        #
        ######################################################################
        return translation

class RotationBranch(nn.Module):
    """
    3D Rotation Regression Module for PoseCNN. 
    """    
    def __init__(self, feature_dim = 512, roi_shape = 7, hidden_dim = 4096, num_classes = 10):
        super(RotationBranch, self).__init__()

        ######################################################################
        # TODO: Initialize layers of rotation branch for PoseCNN.            #
        # It is recommended that you initialize each convolution kernel with #
        # the kaiming_normal initializer and each bias vector to zeros.      #
        ######################################################################
        # Replace "pass" statement with your code
        three_fc_layers = []
        linear1=nn.Linear(feature_dim*roi_shape*roi_shape, hidden_dim)
        nn.init.kaiming_normal_(linear1.weight)
        linear1.bias.data.fill_(0.0)
        three_fc_layers.append(linear1)
        
        linear2=nn.Linear(hidden_dim, hidden_dim)
        nn.init.kaiming_normal_(linear2.weight)
        linear2.bias.data.fill_(0.0)
        three_fc_layers.append(linear2)
        
        linear3=nn.Linear(hidden_dim, 4*num_classes)
        nn.init.kaiming_normal_(linear3.weight)
        linear3.bias.data.fill_(0.0)
        three_fc_layers.append(linear3)
        self.three_fc_layers = nn.Sequential(*three_fc_layers)

        self.roi1 = RoIPool(output_size=(roi_shape,roi_shape), spatial_scale = 1/8)
        self.roi2 = RoIPool(output_size=(roi_shape,roi_shape), spatial_scale = 1/16)
        self.flatten = nn.Flatten()
        ######################################################################
        #                            END OF YOUR CODE                        #
        ######################################################################


    def forward(self, feature1, feature2, bbx):
        """
        Args:
            feature1: Features from feature extraction backbone (B, 512, h, w)
            feature2: Features from feature extraction backbone (B, 512, h//2, w//2)
            bbx: Bounding boxes of regions of interst (N, 5) with (batch_ids, x1, y1, x2, y2)
        Returns:
            quaternion: Regressed components of a quaternion for each class at each ROI.
                quaternion size: (N,4*num_classes)
        """
        quaternion = None

        ######################################################################
        # TODO: Implement forward pass of rotation branch.                   #
        ######################################################################
        # Replace "pass" statement with your code
        feature1_roi = self.roi1(feature1.float(), bbx.float())
        feature2_roi = self.roi2(feature2.float(), bbx.float())
        feat_int = feature1_roi + feature2_roi
        feat = self.flatten(feat_int)

        quaternion = self.three_fc_layers(feat)
        ######################################################################
        #                            END OF YOUR CODE                        #
        ######################################################################

        return quaternion

class PoseCNN(nn.Module):
    """
    PoseCNN
    """
    def __init__(self, pretrained_backbone, models_pcd, cam_intrinsic):
        super(PoseCNN, self).__init__()

        self.iou_threshold = 0.7
        self.models_pcd = models_pcd
        self.cam_intrinsic = cam_intrinsic

        ######################################################################
        # TODO: Initialize layers and components of PoseCNN.                 #
        #                                                                    #
        # Create an instance of FeatureExtraction, SegmentationBranch,       #
        # TranslationBranch, and RotationBranch for use in PoseCNN           #
        ######################################################################
        # Replace "pass" statement with your code

        self.feature_extractor = FeatureExtraction(pretrained_backbone).to(device=models_pcd.device)
        self.segmentation_branch = SegmentationBranch().to(device=models_pcd.device)
        self.translation_branch = TranslationBranch().to(device=models_pcd.device)
        self.rotation_branch = RotationBranch().to(device=models_pcd.device)

        ######################################################################
        #                            END OF YOUR CODE                        #
        ######################################################################


    def forward(self, input_dict):
        """
        input_dict = {
            'rgb',
            'depth',
            'objs_id',
            'mask',
            'bbx',
            'RTs'
        }
        """


        if self.training:
            loss_dict = {
                "loss_segmentation": 0,
                "loss_centermap": 0,
                "loss_R": 0
            }

            gt_bbx = self.getGTbbx(input_dict)

            ######################################################################
            # TODO: Implement PoseCNN's forward pass for training.               #
            #                                                                    #
            # Model should extract features, segment the objects, identify roi   #
            # object bounding boxes, and predict rotation and translations for   #
            # each roi box.                                                      #
            #                                                                    #
            # The training loss for semantic segmentation should be stored in    #
            # loss_dict["loss_segmentation"] and calculated using the            #
            # loss_cross_entropy(.) function.                                    #
            #                                                                    #
            # The training loss for translation should be stored in              #
            # loss_dict["loss_centermap"] using the L1loss function.             #
            #                                                                    #
            # The training loss for rotation should be stored in                 #
            # loss_dict["loss_R"] using the given loss_Rotation function.        #
            ######################################################################
            # Important: the rotation loss should be calculated only for regions
            # of interest that match with a ground truth object instance.
            # Note that the helper function, IOUselection, may be used for 
            # identifying the predicted regions of interest with acceptable IOU 
            # with the ground truth bounding boxes.
            # If no ROIs result from the selection, don't compute the loss_R
            
            # Replace "pass" statement with your code

            feature1, feature2 = self.feature_extractor(input_dict)
            probability, segmentation, bbx = self.segmentation_branch(feature1, feature2)
            translation = self.translation_branch(feature1,feature2)
            bbx_select = IOUselection(bbx, gt_bbx, self.iou_threshold)
            quaternion = self.rotation_branch(feature1, feature2, bbx_select[:,:5])
            loss = nn.L1Loss()
            loss_dict["loss_centermap"] = loss(self.estimateTrans(translation, bbx, segmentation), self.gtTrans(bbx, input_dict))
            
            loss_dict["loss_segmentation"] = loss_cross_entropy(probability, input_dict['label'])
            
            if bbx_select.shape[0] != 0:
              pred_Rs, label = self.estimateRotation(quaternion,bbx_select)
              gt_Rs = self.gtRotation(bbx_select,input_dict)
              loss_dict["loss_R"] = loss_Rotation(pred_Rs,gt_Rs,label, self.models_pcd)

            ######################################################################
            #                            END OF YOUR CODE                        #
            ######################################################################
            
            return loss_dict
        else:
            output_dict = None
            segmentation = None

            with torch.no_grad():
                ######################################################################
                # TODO: Implement PoseCNN's forward pass for inference.              #
                ######################################################################
                # Replace "pass" statement with your code

                feature1, feature2 = self.feature_extractor(input_dict)
                probability, segmentation, bbx = self.segmentation_branch(feature1, feature2)
                translation = self.translation_branch(feature1,feature2)
                centers, depths = HoughVoting(segmentation, translation)

                quaternion = self.rotation_branch(feature1, feature2, bbx[:,:5])

                pred_Rs, _ = self.estimateRotation(quaternion, bbx)
                output_dict = self.generate_pose(pred_Rs, centers, depths, bbx)

                ######################################################################
                #                            END OF YOUR CODE                        #
                ######################################################################

            return output_dict, segmentation
    
    def estimateTrans(self, translation_map, filter_bbx, pred_label):
        """
        translation_map: a tensor [batch_size, num_classes * 3, height, width]
        filter_bbx: N_filter_bbx * 6 (batch_ids, x1, y1, x2, y2, cls)
        label: a tensor [batch_size, num_classes, height, width]
        """
        N_filter_bbx = filter_bbx.shape[0]
        pred_Ts = torch.zeros(N_filter_bbx, 3)
        for idx, bbx in enumerate(filter_bbx):
            batch_id = int(bbx[0].item())
            cls = int(bbx[5].item())
            trans_map = translation_map[batch_id, (cls-1) * 3 : cls * 3, :]
            label = (pred_label[batch_id] == cls).detach()
            pred_T = trans_map[:, label].mean(dim=1)
            pred_Ts[idx] = pred_T
        return pred_Ts

    def gtTrans(self, filter_bbx, input_dict):
        N_filter_bbx = filter_bbx.shape[0]
        gt_Ts = torch.zeros(N_filter_bbx, 3)
        for idx, bbx in enumerate(filter_bbx):
            batch_id = int(bbx[0].item())
            cls = int(bbx[5].item())
            gt_Ts[idx] = input_dict['RTs'][batch_id][cls - 1][:3, [3]].T
        return gt_Ts 

    def getGTbbx(self, input_dict):
        """
            bbx is N*6 (batch_ids, x1, y1, x2, y2, cls)
        """
        gt_bbx = []
        objs_id = input_dict['objs_id']
        device = objs_id.device
        ## [x_min, y_min, width, height]
        bbxes = input_dict['bbx']
        for batch_id in range(bbxes.shape[0]):
            for idx, obj_id in enumerate(objs_id[batch_id]):
                if obj_id.item() != 0:
                    # the obj appears in this image
                    bbx = bbxes[batch_id][idx]
                    gt_bbx.append([batch_id, bbx[0].item(), bbx[1].item(),
                                  bbx[0].item() + bbx[2].item(), bbx[1].item() + bbx[3].item(), obj_id.item()])
        return torch.tensor(gt_bbx).to(device=device, dtype=torch.int16)
        
    def estimateRotation(self, quaternion_map, filter_bbx):
        """
        quaternion_map: a tensor [batch_size, num_classes * 3, height, width]
        filter_bbx: N_filter_bbx * 6 (batch_ids, x1, y1, x2, y2, cls)
        """
        N_filter_bbx = filter_bbx.shape[0]
        pred_Rs = torch.zeros(N_filter_bbx, 3, 3)
        label = []
        for idx, bbx in enumerate(filter_bbx):
            batch_id = int(bbx[0].item())
            cls = int(bbx[5].item())
            quaternion = quaternion_map[idx, (cls-1) * 4 : cls * 4]
            quaternion = nn.functional.normalize(quaternion, dim=0)
            pred_Rs[idx] = quaternion_to_matrix(quaternion)
            label.append(cls)
        label = torch.tensor(label)
        return pred_Rs, label

    def gtRotation(self, filter_bbx, input_dict):
        N_filter_bbx = filter_bbx.shape[0]
        gt_Rs = torch.zeros(N_filter_bbx, 3, 3)
        for idx, bbx in enumerate(filter_bbx):
            batch_id = int(bbx[0].item())
            cls = int(bbx[5].item())
            gt_Rs[idx] = input_dict['RTs'][batch_id][cls - 1][:3, :3]
        return gt_Rs 

    def generate_pose(self, pred_Rs, pred_centers, pred_depths, bbxs):
        """
        pred_Rs: a tensor [pred_bbx_size, 3, 3]
        pred_centers: [batch_size, num_classes, 2]
        pred_depths: a tensor [batch_size, num_classes]
        bbx: a tensor [pred_bbx_size, 6]
        """        
        output_dict = {}
        for idx, bbx in enumerate(bbxs):
            bs, _, _, _, _, obj_id = bbx
            R = pred_Rs[idx].numpy()
            center = pred_centers[bs, obj_id - 1].numpy()
            depth = pred_depths[bs, obj_id - 1].numpy()
            if (center**2).sum().item() != 0:
                T = np.linalg.inv(self.cam_intrinsic) @ np.array([center[0], center[1], 1]) * depth
                T = T[:, np.newaxis]
                if bs.item() not in output_dict:
                    output_dict[bs.item()] = {}
                output_dict[bs.item()][obj_id.item()] = np.vstack((np.hstack((R, T)), np.array([[0, 0, 0, 1]])))
        return output_dict


def eval(model, dataloader, device, alpha = 0.35):
    import cv2
    model.eval()

    sample_idx = random.randint(0,len(dataloader.dataset)-1)
    ## image version vis
    rgb = torch.tensor(dataloader.dataset[sample_idx]['rgb'][None, :]).to(device)
    inputdict = {'rgb': rgb}
    pose_dict, label = model(inputdict)
    poselist = []
    rgb =  (rgb[0].cpu().numpy().transpose(1, 2, 0) * 255).astype(np.uint8)
    return dataloader.dataset.visualizer.vis_oneview(
        ipt_im = rgb, 
        obj_pose_dict = pose_dict[0],
        alpha = alpha
        )



